<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation=" 
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security.xsd 
      http://www.springframework.org/schema/context 
      http://www.springframework.org/schema/context/spring-context-4.1.xsd 
      http://www.springframework.org/schema/beans 
      https://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler" />
	<!-- 비밀번호를 암호화하는 것을 사용자 정의로 처리해보자 -->
	<bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder" />
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService" />
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler" />
	<security:http>
<!-- 		<security:intercept-url pattern="/board/list" access="permitAll" /> -->
<!-- 		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')" /> -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll" /> -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')" /> -->
		<!-- 로그인 시 시큐리티가 제공해주는 기본 폼 기반 인증 기능을 사용 / 아이디, 비번, submit버튼 -->
		<!-- <security:form-login/> -->
		<security:form-login login-page="/login"  authentication-success-handler-ref="customLoginSuccess"/>

		<!-- 접근 거부 처리자의 URI지정 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<!-- 사용자 정의 접근 거부 처리자 접근 거부가 발생한 상황에 단순 메시지 처리 이상의 다양한 처리를 하고자 한다면 직접 구현할 
			수 있다. -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		
		<!-- root-context에 DB관련 dataSource 끌어옴 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		
		
		<!-- 로그아웃 처리 -->
		<!-- 로그아웃을 위한 URI를 지정하고, 로그아웃 처리 후에 별도의 작업을 하기 위해 사용자가 직접 구현한 처리자를 등록 가능 
			invalidate-session="true" : 로그아웃 후에 세션을 무효화
		-->
		<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/>
	</security:http>


	<!-- authentication : 인증(로그인) 패스워드 암호화 처리기를 설정을 꼭 해줘야 함 {noop} -->
	<security:authentication-manager>
		<!-- 메모리상에 아이디와 비밀번호를 지정하고 로그인을 처리. 지정된 아이디와 비밀번호로 로그인이 가능하도록 설정 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 데이터 소스를 지정 root-context에 있는 데이터베이스 정보 참조 -->
<!-- 			<security:jdbc-user-service -->
<!-- 				data-source-ref="dataSource" -->
<!-- 				users-by-username-query="SELECT MEM_ID, MEM_PASS, ENABLED FROM MEMBER WHERE MEM_ID = ?" -->
<!-- 				authorities-by-username-query="SELECT A.MEM_ID, B.AUTH FROM MEMBER A, MEMBER_AUTH B WHERE A.MEM_ID = B.MEM_ID AND A.MEM_ID = ?" /> -->
			<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정 -->
			<security:password-encoder
				ref="customPasswordEncoder" />
			<!-- <security:user-service> -->
			<!-- <security:user name="member" password="{noop}java" -->
			<!-- authorities="ROLE_MEMBER" /> -->
			<!-- <security:user name="admin" password="{noop}java" -->
			<!-- authorities="ROLE_MEMBER,ROLE_ADMIN" /> -->
			<!-- </security:user-service> -->
		</security:authentication-provider>
	</security:authentication-manager>

</beans>












